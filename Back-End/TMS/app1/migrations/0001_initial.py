# Generated by Django 4.2.4 on 2023-08-31 16:43

import app1.models.enums.TrainingStatus
import app1.models.enums.UserType
import app1.models.manager
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('contact', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', app1.models.manager.userManager()),
            ],
        ),
        migrations.CreateModel(
            name='Grades',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grade', models.CharField(choices=[('Grade1', 'Grade1'), ('Grade2', 'Grade2'), ('Grade3', 'Grade3'), ('Grade4', 'Grade4'), ('Grade5', 'Grade5'), ('Grade6', 'Grade6'), ('Grade7', 'Grade7'), ('Grade8', 'Grade8'), ('Grade9', 'Grade9'), ('Grade10', 'Grade10'), ('Grade11', 'Grade11'), ('Grade12', 'Grade12')], max_length=50, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField(max_length=500)),
                ('contact', models.CharField(max_length=12)),
                ('erp_code', models.CharField(max_length=12)),
                ('trainingStatus', models.CharField(choices=[('ONGOING', 'ONGOING'), ('COMPLETED', 'COMPLETED'), ('CANCELLED', 'CANCELLED'), ('PENDING', 'PENDING')], default=app1.models.enums.TrainingStatus.TrainingStatus['PENDING'], max_length=50)),
                ('am', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='academic_manager', to=settings.AUTH_USER_MODEL)),
                ('grades', models.ManyToManyField(to='app1.grades')),
                ('om', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='operation_manager', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainingSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trainingType', models.CharField(choices=[('ROBOTICS', 'ROBOTICS'), ('COMPUTER_SCIENCE', 'COMPUTER_SCIENCE')], max_length=20)),
                ('trainingStatus', models.CharField(choices=[('ONGOING', 'ONGOING'), ('COMPLETED', 'COMPLETED'), ('CANCELLED', 'CANCELLED'), ('PENDING', 'PENDING')], default=app1.models.enums.TrainingStatus.TrainingStatus['ONGOING'], max_length=20)),
                ('startTime', models.TimeField()),
                ('endTime', models.TimeField()),
                ('date', models.DateField(auto_now=True)),
                ('remarks', models.TextField(max_length=500)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='userRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('roles', models.CharField(choices=[('ADMIN', 'ADMIN'), ('TRAINER', 'TRAINER'), ('AM', 'AM'), ('OM', 'OM')], default=app1.models.enums.UserType.UserType['TRAINER'], max_length=50, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('startDate', models.DateField()),
                ('startTime', models.TimeField()),
                ('endTime', models.TimeField()),
                ('trainingStatus', models.CharField(choices=[('ONGOING', 'ONGOING'), ('COMPLETED', 'COMPLETED'), ('CANCELLED', 'CANCELLED'), ('PENDING', 'PENDING')], default=app1.models.enums.TrainingStatus.TrainingStatus['PENDING'], max_length=50)),
                ('trainingType', models.CharField(choices=[('ROBOTICS', 'ROBOTICS'), ('COMPUTER_SCIENCE', 'COMPUTER_SCIENCE')], max_length=50)),
                ('grades', models.ManyToManyField(to='app1.grades')),
                ('schools', models.ManyToManyField(to='app1.school')),
                ('trainers', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='school',
            name='sheet',
            field=models.ManyToManyField(blank=True, to='app1.trainingsheet'),
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, to='app1.userrole'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
